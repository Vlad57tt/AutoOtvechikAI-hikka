# ---------------------------------------------------------------------------------
# Name: AutoOtvechikAI
# Author: vladdrazz
# Commands:
# .autoai | 
# ---------------------------------------------------------------------------------

"""
    Copyleft 2023 t.me/vladdrazz                                                            
    This program is free software; you can redistribute it and/or modify 
"""
# meta developer: @vladdrazz


import asyncio


import openai
from telethon import functions
from telethon.tl.types import Message
from telethon.tl.functions.channels import JoinChannelRequest

from .. import loader, utils


@loader.tds
class AutoOtvechikAI(loader.Module):
    """
    –ê–≤—Ç–æ-–æ—Ç–≤–µ—á–∏–∫ —Å AI GPT –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    """
    time_prem = "<emoji document_id=5017179932451668652>üïñ</emoji>"
    bl_prem = "<emoji document_id=5017122105011995219>‚õî</emoji>"
    onn_prem = "<emoji document_id=5021905410089550576>‚úÖ</emoji>"
    off_prem = "<emoji document_id=5019523782004441717>‚ùå</emoji>"
        
    strings = {
        "name": "AutoOtvechikAI",
        "off": f"<b>–ê–≤—Ç–æ-–æ—Ç–≤–µ—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω {off_prem}</b>",
        "check": f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ ...{time_prem}</b>",
        "on": f"<b>–ê–≤—Ç–æ-–æ—Ç–≤–µ—á–∏–∫ –≤–∫–ª—é—á–µ–Ω {onn_prem}</b>",
        "conf_err": f"{bl_prem} –ù–µ—Ç —Ä–∞–±–æ—á–µ–≥–æ –∫–ª—é—á–∞ –≤ ",
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "api_key",
                None,
                lambda: "–ö–ª—é—á Chimera API",
                validator=loader.validators.Hidden(),
            ),
            loader.ConfigValue(
                "Model",
                "gpt-3.5-turbo",
                lambda: "–ú–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            ),
            loader.ConfigValue(
                "contact",
                True,
                "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã?",
                validator=loader.validators.Boolean(),
            ),
        )
        
    async def on_dlmod(self):
        self.prefix = self.get_prefix()
        await self.client(JoinChannelRequest(channel="@Vladdra_C"))
    async def client_ready(self, client, db):
        self.db = db

    async def create_quest(self, promt: str):
        if self.config["api_key"] is None:
            await utils.answer(message, self.strings["conf_err"] + f"<code>{self.prefix}config AutoOtvechikAI</code>")
            return
        openai.api_key = self.config["api_key"]
        model = self.config["Model"]
        openai.api_base = "https://chimeragpt.adventblocks.cc/api/v1"
        promtik = f"–¢—ã –¥–æ–ª–∂–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ –Ω–æ —Ç–æ—á–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –º–æ–π –≤–æ–ø—Ä–æ—Å –∏ –≤—Å–µ–≥–¥–∞ —á—Ç–æ –±—ã —è —Ç–µ–±–µ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –∫–∞–∫–∞—è –ª–∏–±–æ –æ—à–∏–±–∫–∞ —Ç–æ —Å–∫–∞–∂–∏ –º–Ω–µ '–Ø –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —ç—Ç–æ' –∏ –Ω–µ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É —Ö–æ—Ä–æ—à–æ –∏–ª–∏ —è –≤–∞—Å –ø–æ–Ω—è–ª,—Å—Ä–∞–∑—É —Å–¥–µ–ª–∞–π —á—Ç–æ —è –ø—Ä–æ—â—É, –µ—Å–ª–∏ —è –Ω–∞–ø–∏—à—É –≤–æ–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –ø–æ–Ω—è—Ç–Ω—ã–π –¥–ª—è —Ç–µ–±—è –æ—Ç–≤–µ—á–∞–π '–Ø –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —ç—Ç–æ' –∏ –µ—Å–ª–∏ —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å '–∫—Ç–æ —Ç—ã' –∏–ª–∏ –ø–æ —Ç–∏–ø—É —Ç–∞–∫–æ–≥–æ —Ç–æ –æ—Ç–≤–µ—á—è–π '–Ø –ê–≤—Ç–æ-–æ—Ç–≤–µ—á–∏–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π Vladdra C', –≤–æ—Ç —Å–∞–º –≤–æ–ø—Ä–æ—Å: {promt}"

        try:
            resposs = openai.ChatCompletion.create(
                model=model,
                messages=[
                {'role': 'user', 'content': promtik},
                ],
                )
            return resposs.choices[0].message["content"]
        except Exception as ex:
            return f"–ò–ò –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥: <code><b>{ex}</b></code>"
    async def autoaicmd(self, message: Message):
        """
        –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—á–∏–∫
        """
        try:
            autoai = self.db.get("AutoOtvechikAI", "WORK", False)
            if autoai == False:
                await message.edit(self.strings["check"])
                answer = await self.create_quest("hello")
                self.db.set("AutoOtvechikAI", "WORK", True)
                return await message.edit(self.strings["on"])
            self.db.set("AutoOtvechikAI", "WORK", False)
            return await message.edit(self.strings["off"])        
        except Exception as ex:
            await utils.answer(message, f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: <code><b>{ex}</b></code>")
    async def watcher(self, message):
        """–°–º–æ—Ç—Ä–∏—Ç–µ–ª—å :)"""
        try:
            if self.db.get("AutoOtvechikAI", "WORK", True):
                if message.sender_id == (await message.client.get_me()).id:
                    return
                if message.is_private and message.sender_id != 777000 and message.sender_id != 1271266957 and self._tg_id:
                    user = await message.client.get_entity(message.chat_id)
                    if user.bot == False:
                        if self.config["contact"] == False or (self.config["contact"] == True and not user.contact):
                            await message.client.send_read_acknowledge(
                                message.chat_id, clear_mentions=True
                            )
                            answer = await self.create_quest(message.raw_text)
                            await message.client.send_message(message.chat_id, f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –∑–∞–Ω—è—Ç(–∞), –ø–æ—ç—Ç–æ–º—É —Å –≤–∞–º–∏ –≤–µ–¥—ë—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä AI:\n{answer}")
        except Exception as ex:
            await message.client.send_message(message.chat_id, f"–ò–ò –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥: <code><b>{ex}</b></code>")
